수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.

예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.

수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------------------------------------------
//my sol
import sys

sys.stdin = open("input.txt","rt")

if __name__ == "__main__" :
    n = int(input())
    a = list(map(int,input().split()))
    dp = [1]*(n) ## dp[i] : i번째 요소를 끝으로 하는 가장 긴 바이토닉 수열의 길이
    for i in range (1,n) :
        for j in range (i+1) :
            if a[i]>a[j] : ## LIS
                dp[i] = max(dp[i],dp[j]+1)

    a.reverse() ## 뒤부터 증가수열을 검색 (LIS 거꾸로)
    dy = [1]*(n)
    for i in range (1,n) :
        for j in range (i+1) :
            if a[i]>a[j] : ##LIS
                dy[i] = max(dy[i],dy[j]+1)
    dy.reverse()  ## 뒤집으면 뒤에서부터의 증가수열의 최대값이다.
    for i in range (n) :
        dp[i] += dy[i] -1 ## 각 수열에서 자기자신이 중복해서 카운트되므로 1을 빼준다.

    print(max(dp))