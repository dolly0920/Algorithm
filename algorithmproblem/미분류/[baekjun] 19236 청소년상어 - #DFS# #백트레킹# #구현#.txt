https://www.acmicpc.net/problem/19236
---------------------------------------------------------------------
import sys
from copy import deepcopy

##sys.stdin = open("input.txt","rt")

dr = [-1,-1,0,1,1,1,0,-1]
dc = [0,-1,-1,-1,0,1,1,1]

def next_turn(arr,r,c) : ## 이동한 배열값 출력
    for num in range (1,17) : ## 1번 ~ 16번 물고기 이동
        for i in range (4) :
            flag = 0
            for j in range (4) :
                if arr[i][j][0] == num : ## 해당 물고기라면
                    flag = 1
                    for _ in range (8) :
                        ni = i + dr[arr[i][j][1]]
                        nj = j + dc[arr[i][j][1]]
                        if ni<0 or ni>=4 or nj<0 or nj>=4 or (ni==r and nj==c): ## 범위를 벗어나는 경우, 상어가 있는 경우
                            arr[i][j][1] = (arr[i][j][1]+1)%8 ## 방향전환
                            continue
                        arr[i][j],arr[ni][nj] = arr[ni][nj],arr[i][j] ## 위치 교환
                        break ## 방향전환을 끝내는 break
                    break ## 4*4탐색을 멈추게함
            if flag :
                break ## 4*4 탐색을 멈추고 다음 번호 물고기 탐색
    return arr


def DFS(arr,r,c,dir,eat_fish) : ## 물고기들의 배열, 상어의 좌표(r,c), 상어의 방향, 먹은 물고기의 합
    global answer
    arr = next_turn(arr,r,c) ## 물고기 이동
    while True :
        nr = r + dr[dir]
        nc = c + dc[dir]
        if nr<0 or nr>=4 or nc<0 or nc>=4 : ## 범위를 벗어나는 경우
            break
        r, c = nr, nc
        if arr[r][c] != [0,0] : ## 물고기가 있다면
            arr1 = deepcopy(arr) ## 여기서 deepcopy안쓰면 값이 꼬인다. (why?)
            tmp = arr1[r][c] ## 이전 값 기억
            ## tmp = arr[r][c]
            ## arr[r][c] = [0,0]

            arr1[r][c] = [0,0]
            DFS(arr1,r,c,tmp[1],eat_fish+tmp[0])
    answer = max(answer,eat_fish)
    return


if __name__ == "__main__" :
    MAP = []
    for _ in range (4) :
        row = []
        tmp = list(map(int,input().split()))
        for i in range (0,8,2) :
            row.append([tmp[i],tmp[i+1]-1])
        MAP.append(row)
    sum = 0
    answer = 0
    shark_size,shark_dir = MAP[0][0][0],MAP[0][0][1]
    MAP[0][0] = [0,0]
    DFS(MAP,0,0,shark_dir,shark_size)
    print(answer)