https://programmers.co.kr/learn/courses/30/lessons/43105
----------------------------------------------------------------------------------------------------------------
## 문제의 조건은 아래 칸으로 이동할 때 대각선 방향으로 한칸 오른쪽 또는 왼쪽으로 이동가능하다. (그림 상에서는 대각선 왼쪽이 이지만 배열로 표현했을 때는 대각선 왼쪽이 바로 아래로 표현된다.)
## 그러므로 아래로 가는 경우와 오른쪽 아래로 가는 경우를 따지면 된다.
## 아래로 가는 과정에서 최대값을 갱신하면서 맨 아래의 줄을 갱신한 뒤 맨 아래줄에서의 최댓값을 찾으면 그 값이 정답이 된다.
def solution(triangle):
    answer = 0
    ## bottom-up방식
    ## dp[i][j] = max(dp[i-1][j],dp[i-1][j-1])+triangle[i][j]
    dp = [[0] * (i + 1) for i in range(len(triangle))]
    dp[0][0] = triangle[0][0]
    for i in range(1, len(triangle)):  ## 깊이
        for j in range(i + 1):  ## 가로
            if j == 0:  ## 맨 앞의 원소인 경우
                dp[i][j] = dp[i - 1][j] + triangle[i][j]
            elif j == i:  ## 맨 끝의 원소인 경우
                dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + triangle[i][j]	## dp[i-1][j] : 바로 위, dp[i-1][j-1] : 왼쪽 대각선위 (해당 블록에서 오른쪽 대각선으로 온 것이다!)

    answer = max(dp[len(triangle)-1])

    return answer