적록색약은 빨간색과 초록색의 차이를 거의 느끼지 못한다. 따라서, 적록색약인 사람이 보는 그림은 아닌 사람이 보는 그림과는 좀 다를 수 있다.

크기가 N×N인 그리드의 각 칸에 R(빨강), G(초록), B(파랑) 중 하나를 색칠한 그림이 있다. 그림은 몇 개의 구역으로 나뉘어져 있는데, 구역은 같은 색으로 이루어져 있다. 또, 같은 색상이 상하좌우로 인접해 있는 경우에 두 글자는 같은 구역에 속한다. (색상의 차이를 거의 느끼지 못하는 경우도 같은 색상이라 한다)

예를 들어, 그림이 아래와 같은 경우에

RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
적록색약이 아닌 사람이 봤을 때 구역의 수는 총 4개이다. (빨강 2, 파랑 1, 초록 1) 하지만, 적록색약인 사람은 구역을 3개 볼 수 있다. (빨강-초록 2, 파랑 1)

그림이 입력으로 주어졌을 때, 적록색약인 사람이 봤을 때와 아닌 사람이 봤을 때 구역의 수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------------------------------------------
//My sol(DFS)
import sys
sys.setrecursionlimit(100000)
##sys.stdin = open("input.txt","rt")

dr = [0,0,1,-1]
dc = [1,-1,0,0]


def DFS(r,c,color) :
    visit[r][c] = 1

    for i in range (4) :
        nr = r + dr[i]
        nc = c + dc[i]
        if 0<=nr<N and 0<=nc<N :
            if visit[nr][nc] == 0 and a[nr][nc] == color :
                DFS(nr,nc,color)
    return


if __name__ == "__main__" :
    N = int(input())
    a = []
    for _ in range (N) :
        a.append(list(input()))

    visit = [[0]*N for _ in range (N)]
    ans1 = 0 ## 정상
    ans2 = 0 ## 적록 색맹
    for i in range (N) :
        for j in range (N) :
            if visit[i][j] == 0 :
                ans1 += 1
                DFS(i,j,a[i][j])

    for i in range (N) : ## 적록 색맹의 경우
        for j in range (N) :
            if a[i][j] == 'G' :
                a[i][j] = 'R'
    visit = [[0]*N for _ in range (N)]
    for i in range (N) :
        for j in range (N) :
            if visit[i][j] == 0 :
                ans2 += 1
                DFS(i,j,a[i][j])

    print(ans1,ans2)
--------------------------------------------------------------------------------------------------------------------
//My sol (BFS)
import sys
from collections import deque

##sys.stdin = open("input.txt","rt")

dr = [0,0,1,-1]
dc = [1,-1,0,0]


def BFS(r,c,color) :
    visit[r][c] = 1
    q = deque()
    q.append((r,c))

    while q :
        x,y = q.popleft()
        for i in range (4) :
            nr = x + dr[i]
            nc = y + dc[i]
            if 0<=nr<N and 0<=nc<N :
                if visit[nr][nc] == 0 and a[nr][nc] == color :
                    visit[nr][nc] = 1
                    q.append((nr,nc))


if __name__ == "__main__" :
    N = int(input())
    a = []
    for _ in range (N) :
        a.append(list(input()))

    visit = [[0]*N for _ in range (N)]
    ans1 = 0 ## 정상
    ans2 = 0 ## 적록 색맹
    for i in range (N) :
        for j in range (N) :
            if visit[i][j] == 0 :
                ans1 += 1
                BFS(i,j,a[i][j])

    for i in range (N) : ## 적록 색맹의 경우
        for j in range (N) :
            if a[i][j] == 'G' :
                a[i][j] = 'R'

    visit = [[0]*N for _ in range (N)]
    for i in range (N) :
        for j in range (N) :
            if visit[i][j] == 0 :
                ans2 += 1
                BFS(i,j,a[i][j])

    print(ans1,ans2)