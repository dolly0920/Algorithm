https://www.acmicpc.net/problem/1938
----------------------------------------------------------------------------------------------------------------
## 시간최적화가 굉장히 부족한 코드. (아래 최적화한 코드도 작성함)
import sys
from collections import deque

##sys.stdin = open("input.txt","rt")

dr = [0,0,1,-1,1,1,-1,-1]
dc = [1,-1,0,0,1,-1,1,-1]

def dir_test(cur_tree,i) :  ## 상하좌우 움직임 : 불가능한 경우 -1 리턴
    nr1,nc1 = cur_tree[0][0]+dr[i], cur_tree[0][1]+dc[i]
    nr2,nc2 = cur_tree[1][0]+dr[i], cur_tree[1][1]+dc[i]
    nr3,nc3 = cur_tree[2][0]+dr[i], cur_tree[2][1]+dc[i]
    if nr1<0 or nr1>=N or nc1<0 or nc1>=N or MAP[nr1][nc1] == '1' :
        return [(-1,-1),(-1,-1),(-1,-1)]
    if nr2<0 or nr2>=N or nc2<0 or nc2>=N or MAP[nr2][nc2] == '1' :
        return [(-1,-1),(-1,-1),(-1,-1)]
    if nr3<0 or nr3>=N or nc3<0 or nc3>=N or MAP[nr3][nc3] == '1' :
        return [(-1,-1),(-1,-1),(-1,-1)]
    return [(nr1,nc1),(nr2,nc2),(nr3,nc3)]

def rotate_test(cur) :
    r1,c1,r2,c2,r3,c3 = cur[0][0],cur[0][1],cur[1][0],cur[1][1],cur[2][0],cur[2][1]
    for i in range (8) : ## 중심점을 기준으로 8방향 탐색 (3*3) 검색
        nr = r2 + dr[i]
        nc = c2 + dc[i]
        if nr<0 or nr>=N or nc<0 or nc>=N or MAP[nr][nc] == '1' :
            return [(-1,-1),(-1,-1),(-1,-1)]
    if (r1==r2 and r2==r3) : ## 가로인 경우
        return [(r2-1,c2),(r2,c2),(r2+1,c2)]
    else : ## 세로인 경우
        return [(r2,c2-1),(r2,c2),(r2,c2+1)]


def BFS(tree) :
    visit = []
    q = deque()
    visit.append(tree)
    q.append(tree)
    ans = 0

    while q :
        ##print(q)
        q_len = len(q)
        while q_len :
            q_len -= 1
            cur_tree = q.popleft()
            if cur_tree == dest :
                return ans
            for i in range (4) : ## 상하좌우
                next_tree = dir_test(cur_tree,i) ## 방향 테스트
                if (next_tree[0][0] == -1) : ## 불가능한 경우
                    continue
                if next_tree in visit :
                    continue
                ##next_tree.sort(key=lambda x:(x[0],x[1]))
                ##print(next_tree)
                visit.append(next_tree)
                q.append(next_tree)
            ## 회전 테스트
            next_tree = rotate_test(cur_tree)
            if (next_tree[0][0] == -1) :
                continue
            if next_tree in visit :
                continue
            ##print(cur_tree)
            ##print(next_tree)
            visit.append(next_tree)
            q.append(next_tree)
        ans += 1
    return 0 ## 이동 불가능


if __name__ == "__main__" :
    N = int(input())
    MAP = []
    tree = []
    dest = []
    for i in range (N) :
        MAP.append(list(input()))
        for j in range (N) :
            if MAP[i][j] == 'B' :
                tree.append((i,j))
            if MAP[i][j] == 'E' :
                dest.append((i,j))
    print(BFS(tree))

## 시간최적화한 코드(약 250ms)
import sys
from collections import deque

sys.stdin = open("input.txt","rt")

dr = [0,0,1,-1,1,1,-1,-1]
dc = [1,-1,0,0,1,-1,1,-1]

def state_test(arr) :
    if arr[0][0] == arr[1][0] and arr[1][0] == arr[2][0] : ## 가로 (행번호가 같다)
        return 1
    else :
        return 2

def rotate_test(arr,state) : ## state 1(가로), state 2(세로)
    for i in range (8) : ## 3*3 확인
        nr = arr[1][0] + dr[i]
        nc = arr[1][1] + dc[i]
        if nr<0 or nr>=N or nc<0 or nc>=N or MAP[nr][nc] == '1' : ## 범위를 벗어나거나 '1'이 있는 경우
            return False
    if state == 1 and 2 in visit[arr[1][0]][arr[1][1]] :
        return False
    elif state == 2 and 1 in visit[arr[1][0]][arr[1][1]] :
        return False
    return True

def BFS(start,dest) :
    q = deque()
    state = state_test(start)
    visit[start[1][0]][start[1][1]].append(state)
    q.append(start)

    cnt = 0 ## 이동횟수

    while q :
        q_len = len(q)
        while q_len :
            q_len -= 1
            cur_tree = q.popleft()
            if cur_tree == dest :
                return cnt
            cur_state = state_test(cur_tree)
            for i in range (4) : ## 상하좌우
                flag = 1
                next_tree = [] ## [(a,b),(c,d),(e,f)]형태
                for j in range (3) : ## 좌표 3개에 대한 연산
                    nr = cur_tree[j][0] + dr[i]
                    nc = cur_tree[j][1] + dc[i]
                    if nr<0 or nr>=N or nc<0 or nc>=N or MAP[nr][nc] == '1' : ## 범위를 벗어나는 경우, 잘린 나무가 이동하려는 좌표에 있는 경우
                        flag = 0
                        break
                    if j==1 and cur_state in visit[nr][nc] : ## 가운데 좌표에 대해서 방문체크 확인 (이미 방문했다면)
                        flag = 0
                        break
                    next_tree.append((nr,nc))
                if flag : ## 조건 통과시
                    visit[next_tree[1][0]][next_tree[1][1]].append(cur_state) ## 방문 체크
                    q.append(next_tree)
            ## 회전 확인
            if rotate_test(cur_tree,cur_state) :
                if cur_state == 1 : ## 가로->세로 회전
                    visit[cur_tree[1][0]][cur_tree[1][1]].append(2)
                    next_tree = [(cur_tree[1][0]-1,cur_tree[1][1]),(cur_tree[1][0],cur_tree[1][1]),(cur_tree[1][0]+1,cur_tree[1][1])]
                    q.append(next_tree)
                else : ## 세로->가로
                    visit[cur_tree[1][0]][cur_tree[1][1]].append(1)
                    next_tree = [(cur_tree[1][0],cur_tree[1][1]-1),(cur_tree[1][0],cur_tree[1][1]),(cur_tree[1][0],cur_tree[1][1]+1)]
                    q.append(next_tree)
        cnt+=1
    return 0


if __name__ == "__main__" :
    N = int(input())
    MAP = []
    s_tree = [] ## 통나무의 시작 좌표 3개
    dest = [] ## 목적지 좌표 3개
    ##visit = [[0] * N for _ in range(N)]  ## visit[i][j] = 1 : 가로방문, visit[i][j] = 2 : 세로방문
    visit = [[[] for _ in range(N)] for _ in range (N)]
    ##print(visit)
    for i in range(N) :
        MAP.append(list(input()))
        for j in range (N) :
            if MAP[i][j] == 'B' :
                s_tree.append((i,j))
            if MAP[i][j] == 'E' :
                dest.append((i,j))
    print(BFS(s_tree,dest))