https://www.acmicpc.net/problem/1854
--------------------------------------------------------------------
import sys
import heapq as hq

sys.stdin = open("input.txt","rt")

def solve() :
    pq = []
    hq.heappush(pq,(0,1))

    while pq :
        ##print(pq)
        cur_dis, cur_node = hq.heappop(pq)
        for next_node, dis in path[cur_node].items() :
            next_dis = cur_dis + dis ## next_node까지의 거리
            if len(min_dist[next_node]) < k :
                hq.heappush(min_dist[next_node],-next_dis) ## 최대힙 (- 붙혀서)
                hq.heappush(pq,(next_dis,next_node))
            elif (-min_dist[next_node][0]) > next_dis : ## min_dist의 최대값(root노드)보다 작은 경우
                hq.heappop(min_dist[next_node])
                hq.heappush(min_dist[next_node],-next_dis)
                hq.heappush(pq,(next_dis,next_node))


if __name__ == "__main__" :
    n,m,k = map(int,input().split())
    path = [{} for _ in range (n+1)]

    for _ in range (m) :
        a,b,c = map(int,input().split())
        path[a][b] = c

    min_dist = [[] for _ in range (n+1)] ## heap형태로 저장
    hq.heappush(min_dist[1],0)
    solve()
    for i in range (1,n+1) :
        if len(min_dist[i]) < k :
            print(-1)
        else :
            for _ in range (len(min_dist[i])-k) :
                hq.heappop(min_dist[i])
            print(-hq.heappop(min_dist[i]))