https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWXRF8s6ezEDFAUo&#;return%20false;
----------------------------------------------------------------------------------------------------------------
dr = [0,1,0,-1]
dc = [1,0,-1,0]

dir_change = ("x",
              (2,0,3,1),
              (2,3,1,0),
              (1,3,0,2),
              (3,2,0,1),
              (2,3,0,1)
              )

if __name__ == "__main__" :
    T = int(input())
    for test_case in range (1,T+1) :
        N = int(input())
        MAP = []
        MAP.append([5]*(N+2))
        for _ in range (N) :
            tmp = [5]
            tmp += (list(map(int,input().split())))
            tmp += [5]
            MAP.append(tmp)
        MAP.append([5]*(N+2)) ## 테두리에 5추가함 (범위 벗어나는 경우 처리 따로 하지 않음)

        ans = 0

        wormhole = {} ## (r,c) : (nr,nc) 꼴
        wormhole_list = [[] for _ in range (11)]

        for i in range (1,N+1) :
            for j in range (1,N+1) : ## 웜홀 찾기
                if 6<=MAP[i][j]<=10 :
                    if wormhole_list[MAP[i][j]] : ## 이미 있다면
                        wormhole[wormhole_list[MAP[i][j]][0]] = (i,j)
                        wormhole[(i,j)] = wormhole_list[MAP[i][j]][0]
                    else : ## 없다면
                        wormhole_list[MAP[i][j]].append((i,j))

        for i in range (1,N+1) :
            for j in range (1,N+1) : ## 시작점 찾기
                if MAP[i][j] == 0 : ## 빈칸만 가능
                    for k in range (4) :
                        r = i + dr[k]
                        c = j + dc[k]
                        score = 0 ## 각 방향에 대해 점수를 계산
                        while True :
                            if (r == i and c == j) or MAP[r][c] == -1 : ## 시작점이거나 블랙홀일 때
                                break ## 게임 종료
                            if 1<=MAP[r][c]<=5 : ## 블록을 밟았을 때
                                score += 1
                                k = dir_change[MAP[r][c]][k]
                            elif 6<=MAP[r][c]<=10 : ## 웜홀을 밟았을 때
                                r,c = wormhole[(r,c)]
                            r += dr[k]
                            c += dc[k]
                        ans = max(ans,score)
        print("#%d %d"%(test_case,ans))