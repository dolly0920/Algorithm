https://www.acmicpc.net/problem/2146
----------------------------------------------------------------------------------------------------------------
## 맞긴했는데 조금 더 최적화 해야할듯
import sys
from collections import deque

sys.stdin = open("input.txt","rt")

dr = [0,0,1,-1]
dc = [1,-1,0,0]

def BFS_area(x,y,area_num) :
    q = deque()
    visit[x][y] = area_num
    q.append((x,y))

    while q :
        r,c = q.popleft()
        for i in range (4) :
            nr = r + dr[i]
            nc = c + dc[i]
            if nr<0 or nr>=N or nc<0 or nc>=N : ## 범위를 벗어날 때
                continue
            if visit[nr][nc] != 0 or MAP[nr][nc] == 0: ## 방문한 곳이거나 바다일 때
                continue
            visit[nr][nc] = area_num
            q.append((nr,nc))
    return

def BFS_distance(x,y,area_num) :
    global answer
    visit_dis = [[0]*N for _ in range (N)]
    q = deque()
    visit_dis[x][y] = 1
    q.append((x,y))

    ret = 0
    while q :
        if ret >= answer : ## 더이상 연산할 필요가 없다.
            break
        q_len = len(q)
        while q_len :
            q_len -= 1
            r,c = q.popleft()
            for i in range (4) :
                nr = r + dr[i]
                nc = c + dc[i]
                if nr<0 or nr>=N or nc<0 or nc>=N : ## 범위를 벗어날 때
                    continue
                if visit_dis[nr][nc] == 1 : ## 방문한 곳인 경우
                    continue
                if MAP[nr][nc] == 1 and visit[nr][nc] != 0 and visit[nr][nc] != area_num : ## 다른 육지일 때
                    return ret
                if MAP[nr][nc] == 1 : ## 위의 경우가 아니라면 육지일 때는 더이상 고려할 필요가 없다.
                    continue
                visit_dis[nr][nc] = 1
                q.append((nr,nc))
        ret += 1
    return sys.maxsize ## 이 좌표에서는 다른 육지로 갈 수 없다.


if __name__ == "__main__" :
    N = int(input())
    visit = [[0]*N for _ in range (N)]
    MAP = []
    for _ in range (N) :    ## 0 : 바다, 1 : 육지
        MAP.append(list(map(int,input().split())))

    area_num = 1
    for i in range (N) :
        for j in range (N) :
            if MAP[i][j] == 1 and visit[i][j] == 0 :
                BFS_area(i,j,area_num)
                area_num += 1

    answer = sys.maxsize
    for i in range (N) :
        for j in range (N) :
            if visit[i][j] != 0 : ## 섬인 곳에서 출발
                answer = min(answer,BFS_distance(i,j,visit[i][j]))
    print(answer)