여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.
지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------------------------------------------
//My sol
#include <stdio.h>

int M, N;
int a[500 + 10][500 + 10];
int visited[500 + 10][500 + 10];
int dp[500 + 10][500 + 10];
int dr[4] = {0,0,1,-1};
int dc[4] = {1,-1,0,0};
int sol;

int DFS(int r, int c)
{
	int i, nr, nc;

	if (dp[r][c] != -1)
	{
		return dp[r][c];	// (r,c)에서 (M-1,N-1)까지 가는 경로 수
	}
	
	if (r == M - 1 && c == N - 1)
	{
		return 1;
	}

	dp[r][c] = 0;
	//visited[r][c] = 1;	// 방문표시
	
	for (i = 0; i < 4; i++)
	{
		nr = r + dr[i];
		nc = c + dc[i];
		if (nr < 0 || nr >= M || nc < 0 || nc >= N)	continue;	// 범위 초과
		if (a[nr][nc] >= a[r][c] /*&& visited[nr][nc] == 1*/)	continue; // 더 높거나 같은 지점일 때, 방문한 곳인 경우
		dp[r][c] += DFS(nr, nc);
		//visited[nr][nc] = 0;	// 방문 초기화
	}

	return dp[r][c];
}

int main(void)
{
	int i,j;

	scanf("%d %d", &M, &N);	// 세로, 가로

	for (i = 0; i < M; i++)
	{
		for (j = 0; j < N; j++)
		{
			scanf("%d", &a[i][j]);	// 각 지점의 높이
		}
	}

	memset(dp, -1, sizeof(dp));	// dp 배열 -1로 초기화

	printf("%d", DFS(0,0));


	return 0;
}