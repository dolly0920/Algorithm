https://www.acmicpc.net/problem/2263
----------------------------------------------------------------------------------------------------------------
import sys

sys.stdin = open("input.txt","rt")

sys.setrecursionlimit(10**9)

def find_tree(i_left,i_right,p_left,p_right) : ## 중위순회 시작, 마지막 인덱스, 후위 순회 시작, 마지막 인덱스
    if p_left <= p_right :
        parent = postorder[p_right] ## 후위 순회의 마지막 노드 값은 root이다 (범위로 잡힌 트리에서의 root)
        p_index = node_index[parent] ## root노드의 중위순회에서의 인덱스 번호

        left_cnt = p_index-i_left ## 루트 왼쪽 트리의 원소 갯수
        if left_cnt > 0 : ## 왼쪽에 트리가 존재한다면
            tree[parent][0] = postorder[p_left+left_cnt-1] ## 후위순회에서 해당 트리의 끝값(루트)가 왼쪽 자식 값
        right_cnt = i_right-p_index ## 루트 오른쪽 트리의 원소 갯수
        if right_cnt > 0 : ## 오른쪽에 트리가 존재한다면
            tree[parent][1] = postorder[p_right-1] ## 오른쪽 트리의 루트는 이전 루트 직전의 값이다.

        find_tree(i_left,p_index-1,p_left,p_left+left_cnt-1) ## 왼쪽 트리
        find_tree(p_index+1,i_right,p_right-right_cnt,p_right-1) ## 오른쪽 트리

def preorder(start) :
    print(start,end=' ')
    if tree[start][0] != 0 : ## 왼쪽 노드가 존재한다면
        preorder(tree[start][0])
    if tree[start][1] != 0 : ## 오른쪽 노드가 존재한다면
        preorder(tree[start][1])


if __name__ == "__main__" :
    N = int(input())
    inorder = list(map(int,input().split())) ## 중위 순회
    postorder = list(map(int,input().split())) ## 후위 순회
    node_index = [0]*(N+1) ## index[i] : i번 노드의 중위 순회에서의 인덱스
    for i in range (N) :
        node_index[inorder[i]] = i
    tree = [[0,0] for _ in range (N+1)] ## tree[0] : left_node, tree[1] : right_node
    find_tree(0,N-1,0,N-1)
    preorder(postorder[-1])
