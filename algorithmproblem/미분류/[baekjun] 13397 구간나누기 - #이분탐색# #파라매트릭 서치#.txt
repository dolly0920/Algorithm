N개의 수로 이루어진 1차원 배열이 있다. 이 배열을 M개 이하의 구간으로 나누어서 구간의 점수의 최댓값을 최소로 하려고 한다. 구간은 다음과 같은 조건을 만족해야 한다.

하나의 구간은 하나 이상의 연속된 수들로 이루어져 있다.
배열의 각 수는 모두 하나의 구간에 포함되어 있어야 한다.
구간의 점수란 구간에 속한 수의 최댓값과 최솟값의 차이이다.

예를 들어, 배열이 [1, 5, 4, 6, 2, 1, 3, 7] 이고, M = 3인 경우가 있다.

이때, [1, 5], [4, 6, 2], [1, 3, 7]로 구간을 나누면 각 구간의 점수는 4, 4, 6점이 된다. 이때, 최댓값은 6점이다.

만약, [1, 5, 4], [6, 2, 1], [3, 7]로 구간을 나누었다면, 각 구간의 점수는 4, 5, 4점이 되고, 이때 최댓값은 5점이 된다.

두 경우 중에서 최댓값이 최소인 것은 5점인 것이고, 5점보다 최댓값을 작게 만드는 방법은 없다.

배열과 M이 주어졌을 때, 구간의 점수의 최댓값의 최솟값을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------------------------------------------
//My sol
import sys

sys.stdin = open("input.txt","rt")

def solve(n) :
    smallest= a[0]
    largest = a[0] ## 0부터 구간 시작
    cnt = 1 ## 0에서 이미 첫번째 구간 시작하므로 새로운 구간은 2부터 시작
    for i in range (1,N) :
        smallest = min(smallest,a[i])
        largest = max(largest,a[i])
        if largest-smallest > n :
            smallest = largest = a[i] ## 커지는 순간부터 새로운 구간 시작
            cnt+=1
    return cnt

if __name__ == "__main__" :
    N,M = map(int,input().split())
    a = list(map(int,input().split()))
    left = 0
    right = 9999
    while left<=right :
        mid = (left+right) // 2
        if solve(mid) > M : ## 나누어 지는 구간 수가 M보다 크다면
            left = mid+1
        else : ## 나누어 지는 구간 수가 N보다 크다면
            right = mid-1

    print(left)