R행 C열의 격자 모양의 지역에 몇 명의 사람이 서 있다. 한 격자에는 최대 한 명의 사람이 있다.
각 사람들은 자신과 인접한 사람과 정확히 한 번씩 악수하는데, 인접한 사람은 아래 그림과 같이 주위 8방향에 있는 사람을 말한다.

민혁이는 이 지역의 빈 격자 중 한 곳에 들어가서 이 지역에서 일어난 악수의 총 횟수가 최대가 되게 하려고 한다. 민혁이가 들어간 후 이 지역에서 일어난 악수의 총 횟수를 구하여라. 만약 빈 격자가 없다면 민혁이는 아무 행동도 하지 않는다.

----------------------------------------------------------------------------------------------------------------
// My Sol
#include <stdio.h>
 
int R, C, cnt;
char str[50+10][50+10];
int used[50+10][50+10];
int sol;
int dr[8] = {0,0,1,-1,1,1,-1,-1};
int dc[8] = {1,-1,0,0,1,-1,1,-1};

void initialize_used(void)
{
	int i,j;

	for(i=1;i<=R;i++)
	{
		for(j=0;j<C;j++)
		{
			used[i][j] = 0;
		}
	}
}

void count_one_person(int r, int c)
{
	int nr,nc,i;

	used[r][c] = 1;

	for(i=0;i<8;i++)
	{
		nr = r + dr[i];
		nc = c + dc[i];
		if(nr<1||nr>R||nc<0||nc>=C)	continue;
		if(str[nr][nc] == '.' || used[nr][nc] == 1)	continue;
		cnt++;	// 한명의 사람에 대하여 체크하고 악수 횟수 count
	}
}

void solve(void)
{
	int i,j;

	initialize_used();
	cnt = 0;

	for(i=1;i<=R;i++)
	{
		for(j=0;j<C;j++)
		{
			if(str[i][j] == 'o')	count_one_person(i,j);
		}
	}

	if (cnt>sol)	sol = cnt;
}

int main(void)
{
      int i,j,tmp;
 
      // 입력받는 부분
      scanf("%d %d\n", &R, &C);
      for(i=1; i<=R; i++)
      {
            gets(str[i]);         // o : 사람 있는 곳, . : 사람 없는 곳
      }
 
      // 여기서부터 작성
	  for(i=1;i<=R;i++)
	  {
		for(j=0;j<C;j++)
		{
			if(str[i][j] == '.')	
			{
				str[i][j] = 'o';	// 민혁이가 들어가는 자리
				solve();
				str[i][j] = '.';	// 원상복귀
			}
		}
	  }

	  if (sol == 0)
	  {
		solve();
	  }
 
      // 출력하는 부분
      printf("%d", sol);
 
      return 0;
}
---------------------------------------------------------------------------------------------------------