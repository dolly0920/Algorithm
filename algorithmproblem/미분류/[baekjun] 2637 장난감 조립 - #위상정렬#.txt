https://www.acmicpc.net/problem/2637
----------------------------------------------------------------------------------------------------------------
import sys
from collections import deque

sys.stdin = open("input.txt","rt")

if __name__ == "__main__" :
    N = int(input()) ## 1 ~ N-1 기본 부품이나 중간 부품의 번호, N : 완제품의 번호 ## 최대 100
    M = int(input()) ## 부품들 간의 관계의 갯수 ## 최대 100
    ## 진입 차수(관계 저장)
    rank = [0] * (N+1)
    ## path(간선값)
    path = [{} for _ in range (N+1)] ## path[i][j] : 부품 j를 만들기 위해 필요한 부품 i의 갯수

    for _ in range (M) :
        X,Y,K = map(int,input().split()) ## 부품들 간의 관계 X를 만드는데 Y부품 K개가 필요하다.
        path[Y][X] = K ## 부품 X를 만들기 위해 부품 Y가 K개 필요하다. (위상 정렬 그래프로 생각하자 y->x의 간선값 3)
        rank[X] += 1

    dp = [[0]*(N+1) for _ in range (N+1)] ## dp[i][j] : i부품을 만드는데 필요한 j부품의 갯수

    q = deque()
    for i in range (1,N+1) :
        if rank[i] == 0 : ## 기본 부품
            dp[i][i] = 1 ## 기본 부품
            q.append(i)

    while q :
        cur = q.popleft()
        for next,cost in path[cur].items() : ## 목적지, 간선값
            for j in range (1,N+1) :
                dp[next][j] += dp[cur][j]*cost ## 갯수 업데이트 ## dp에는 기본 부품에 대한 갯수만 고려되어 있다 이것을 중첩해서 더해준다.
            rank[next] -= 1 ## 진입 차수 -1
            if rank[next] == 0 : ## 진입 가능한 노드가 됬다면
                q.append(next)

    for i in range (1,N+1) :
        if dp[N][i] != 0 :
            print(i,dp[N][i])