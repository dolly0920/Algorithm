https://www.acmicpc.net/problem/9466
----------------------------------------------------------------------------------------------------------------
## while문 사용 (DFS)
import sys

sys.stdin = open("input.txt","rt")

if __name__ == "__main__" :
    T = int(input())
    for _ in range (T) :
        n = int(input()) ## 학생의 수
        ans = n
        visit = [0]*(n+1)
        path = [0] + list(map(int,input().split())) ## 선택된 학생들
        group_num = 1
        for i in range (1,n+1) :
            if visit[i] == 0 : ## 방문하지 않은 학생인 경우
                while visit[i] == 0 : ## 방문하지 않은 노드 탐색
                    visit[i] = group_num ## 그룹 번호로 방문 체크
                    i = path[i] ## 위치 갱신
                ## 위의 while문이 끝나는 시점의 i는 싸이클을 이루는 노드거나 자기 자신을 가리키는 노드이다. 또는 이미 확인한 노드를 향했을 때
                while visit[i] == group_num :
                    visit[i] = -1 ## 싸이클 체크
                    i = path[i]
                group_num += 1

        ans = 0
        for i in range (1,n+1) :
            if visit[i] != -1 :
                ans += 1
        print(ans)

## 위상정렬
import sys
from collections import deque

sys.stdin = open("input.txt","rt")

if __name__ == "__main__" :
    T = int(input())
    for _ in range (T) :
        n = int(input()) ## 학생의 수
        rank = [0]*(n+1)
        path = [0] + list(map(int,input().split())) ## 선택된 학생들
        for i in range (1,len(path)) :
            rank[path[i]] += 1 ## 진입차수 += 1

        q = deque()
        for i in range (1,n+1) :
            if rank[i] == 0 :
                q.append(i)

        cnt = 0
        while q :
            cur = q.popleft()
            cnt += 1

            rank[path[cur]] -= 1
            if rank[path[cur]] == 0 :
                q.append(path[cur])

        print(cnt)
