https://programmers.co.kr/learn/courses/30/lessons/49188
----------------------------------------------------------------------------------------------------------------
import sys

def DFS(v) :
    for i in range (1,n+1) :
        if i in path[v] and visit[i] == 0 : ## 길이 있고 방문하지 않은 정점일 때
            visit[i] = 1 ## 방문 체크
            DFS(i)

def solution(n,edges) :
    global visit, path
    path = [[] for _ in range (n+1)]
    ans = 0
    for s,e in edges :
        path[s].append(e)
        path[e].append(s)

    length = len(edges)
    visit = [0]*(n+1) ## 처음에 선언하고
    for i in range (1,n+1) :
        if length-len(path[i]) < n-1 :
            visit[i] = 1 ## 방문 체크 (빼야하는 정점을 미리 방문체크해서 방문 못하게 한다)
            com_cnt = 0
            for x in path[i] : ## 방문 체크
                if visit[x] == 0 : ## 방문하지 않은 점에서 DFS
                    DFS(x)
                    com_cnt+=1
            if length-len(path[i])+(com_cnt-1) <= (n-1)-1 : ## 이해하기 쉽게 식으로 나타냄
                ans += i
            visit = [0] * (n + 1) ## 방문 배열에 변화가 있는 경우에만 초기화 시킴

    return ans


if __name__ == "__main__" :
    n = 4
    edges = [[1,2],[1,3],[2,3],[2,4],[3,4]]
    print(solution(n,edges))
