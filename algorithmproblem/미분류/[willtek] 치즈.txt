아래 <그림 1>과 같이 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈(회색으로 표시된 부분)가 놓여 있다. 판의 가장자리(<그림 1>에서 네모 칸에 엑스 친 부분)에는 치즈가 놓여 있지 않으며 치즈에는 하나 이상의 구멍이 있을 수 있다.
이 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다. 치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어 가게 된다. <그림 1>의 경우, 치즈의 구멍을 둘러싼 치즈는 녹지 않고 ‘c’로 표시된 부분만 한 시간 후 에 녹아 없어져서 <그림 2>와 같이 된다.
 

 
다시 한 시간 후에는 <그림 2>에서 ‘c’로 표시된 부분이 녹아 없어져서 <그림 3>과 같이 된다.
 

 
<그림 3>은 원래 치즈의 두 시간 후 모양을 나타내고 있으며, 남은 조각들은 한 시간이 더 지나면 모 두 녹아 없어진다. 그러므로 처음 치즈가 모두 녹아 없어지는 데는 세 시간이 걸린다. <그림 3>과 같이 치즈가 녹는 과정에서 여러 조각으로 나누어 질 수도 있다.
입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 공기 중에서 치즈가 모 두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.

----------------------------------------------------------------------------------------------------------------
// My Sol
#include <stdio.h>
 
int N, M;
int a[100+10][100+10];
int visited[100+10][100+10];
int hour, sol, cnt;
int air_cnt;	// 공기에 의해 사라지는 치즈
int dr[4] = {0,0,1,-1};
int dc[4] = {1,-1,0,0};

void DFS(int r, int c)
{
	int nr,nc,i;

	visited[r][c] = 1;	// 여기서 방문체크를 하였기 때문에 아래에서 a[r][c]로 바꿔도 중복되서 카운트 x

	if(a[r][c] == 1)
	{
		air_cnt++;
		a[r][c] = 0;
		return;
	}

	for(i=0;i<4;i++)
	{
		nr = r + dr[i];
		nc = c + dc[i];
		if(nr<1 || nc<1 || nr>N || nc>M)	continue;
		if(visited[nr][nc] == 1)	continue;
		DFS(nr,nc);
	}
}

void visited_clear(void)
{
	int i,j;

	for(i=0;i<=N;i++)
	{
		for(j=0;j<=M;j++)
		{
			visited[i][j] = 0;
		}
	}
}


int main(void)
{
      int i, j;
 
      // 입력받는 부분
      scanf("%d %d", &N, &M);
 
      for(i=1;i<=N;i++)
      {
            for(j=1;j<=M;j++)
            {
                  scanf("%d", &a[i][j]);
				  if(a[i][j] == 1)	cnt++;	// 치즈의 전체 갯수
            }
      }
 
      // 여기서부터 작성
	  while(cnt>0)
	  {
		  visited_clear();
		  air_cnt = 0;
		  DFS(1,1);
		  cnt -= air_cnt;
		  hour++;
	  }

	  sol = air_cnt;

      // 출력하는 부분
      printf("%d\n%d", hour, sol);
 
      return 0;
}